{"version":3,"sources":["firebase.js","DownloadBlock.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DownloadBlock","platform","theme","className","href","iOS","Android","MacOS","Windows","Linux","Web","Card","title","desc","platforms","map","index","key","App","switchTheme","element","state","setState","handleChange","e","submission","target","id","value","filter","handleSubmit","preventDefault","console","log","platformPairs","iosUrl","androidUrl","macUrl","windowsUrl","linuxUrl","webUrl","tempApp","submissionApp","push","database","ref","textInputs","document","querySelectorAll","querySelector","forEach","input","checked","style","display","apps","removeAttribute","this","setAttribute","on","response","newState","data","val","getElementById","body","classList","buttonTheme","appsToRender","app","onClick","name","onChange","onSubmit","htmlFor","type","maxLength","required","toggleElement","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b68825a8.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA5VjgmPHHVTtqU3XBJLBD08_Gh9N_ZHw0\",\n  authDomain: \"satvir-sandhu-project-five.firebaseapp.com\",\n  databaseURL: \"https://satvir-sandhu-project-five.firebaseio.com\",\n  projectId: \"satvir-sandhu-project-five\",\n  storageBucket: \"satvir-sandhu-project-five.appspot.com\",\n  messagingSenderId: \"71907459875\",\n  appId: \"1:71907459875:web:5bd07abe9425ef5c03c296\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from \"react\";\n\nconst DownloadBlock = ({ platform, theme }) => {\n  let colors = {\n    iOS: \"blue\",\n    Android: \"green\",\n    MacOS: \"pink\",\n    Windows: \"purple\",\n    Linux: \"red\",\n    Web: \"teal\",\n  };\n  return (\n    <div className={\"downloadBlock \" + theme}>\n      <a href={platform[1]}>\n        <p className={colors[platform[0]]}>{platform[0]}</p>\n      </a>\n    </div>\n  );\n};\n\nexport default DownloadBlock;\n","import React from \"react\";\nimport DownloadBlock from \"./DownloadBlock\";\n\nconst Card = ({ title, desc, platforms, theme }) => {\n  return (\n    <article className={\"card \" + theme}>\n      <div className=\"cardWrapper\">\n        <h2 className=\"cardTitle\">{title}</h2>\n        <p className=\"cardDescription\">{desc}</p>\n        <p className=\"downloadLabel\">Download / Use</p>\n        <div className=\"downloadBlocks\">\n          {platforms.map((platform, index) => {\n            return (\n              <DownloadBlock\n                platform={platform}\n                key={title + index}\n                theme={theme}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default Card;\n","import React, { Component, Fragment } from \"react\";\nimport firebase from \"./firebase\";\nimport Card from \"./Card\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apps: [],\n      filter: \"All\",\n      theme: \"darkBlock\",\n      submission: {\n        title: \"\",\n        desc: \"\",\n        platforms: [],\n        iosUrl: \"\",\n        androidUrl: \"\",\n        macUrl: \"\",\n        windowsUrl: \"\",\n        linuxUrl: \"\",\n        webUrl: \"\",\n      },\n    };\n  }\n\n  toggleElement(element) {\n    if (element.style.display === \"block\") {\n      element.style.display = \"none\";\n      element.removeAttribute(\"required\");\n      element.value = \"\";\n      this.setState({\n        submission: {\n          ...this.state.submission,\n          [element.id]: element.value,\n        },\n      });\n    } else {\n      element.style.display = \"block\";\n      element.setAttribute(\"required\", \"\");\n    }\n  }\n\n  switchTheme = (element) => {\n    if (this.state.theme === \"lightBlock\") {\n      this.setState({\n        ...this.state,\n        theme: \"darkBlock\",\n      });\n    } else {\n      this.setState({\n        ...this.state,\n        theme: \"lightBlock\",\n      });\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      submission: {\n        ...this.state.submission,\n        [e.target.id]: e.target.value,\n      },\n    });\n  };\n\n  filter = (e) => {\n    this.setState({\n      ...this.state,\n      filter: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"submitting\");\n    const platformPairs = {\n      iosUrl: \"iOS\",\n      androidUrl: \"Android\",\n      macUrl: \"MacOS\",\n      windowsUrl: \"Windows\",\n      linuxUrl: \"Linux\",\n      webUrl: \"Web\",\n    };\n    const tempApp = this.state.submission;\n    const submissionApp = {\n      platforms: [],\n    };\n    for (const key in tempApp) {\n      if (tempApp[key] !== \"\" && !platformPairs[key]) {\n        submissionApp[key] = tempApp[key];\n      }\n      if (platformPairs[key] && tempApp[key] !== \"\") {\n        submissionApp.platforms.push([platformPairs[key], tempApp[key]]);\n      }\n    }\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(submissionApp);\n\n    this.setState({\n      submission: {\n        title: \"\",\n        desc: \"\",\n        platforms: [],\n        iosUrl: \"\",\n        androidUrl: \"\",\n        macUrl: \"\",\n        windowsUrl: \"\",\n        linuxUrl: \"\",\n        webUrl: \"\",\n      },\n    });\n\n    const textInputs = document.querySelectorAll(\"input\");\n    document.querySelector(\"textarea\").value = \"\";\n    textInputs.forEach((input) => {\n      input.value = \"\";\n      input.checked = false;\n    });\n    const hiddenInputs = document.querySelectorAll('input[type=\"text\"]');\n    hiddenInputs.forEach((input) => {\n      if (input.id === \"title\") {\n      } else {\n        input.style.display = \"none\";\n      }\n    });\n  };\n\n  componentDidMount() {\n    // create a variable to store a reference to our database\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (response) => {\n      const newState = [];\n      const data = response.val();\n      for (let key in data) {\n        newState.push({\n          title: data[key].title,\n          desc: data[key].desc,\n          platforms: data[key].platforms,\n          key: key,\n        });\n      }\n\n      this.setState({\n        ...this.state,\n        apps: newState,\n      });\n    });\n  }\n\n  render() {\n    const iosUrl = document.getElementById(\"iosUrl\");\n    const androidUrl = document.getElementById(\"androidUrl\");\n    const macUrl = document.getElementById(\"macUrl\");\n    const windowsUrl = document.getElementById(\"windowsUrl\");\n    const linuxUrl = document.getElementById(\"linuxUrl\");\n    const webUrl = document.getElementById(\"webUrl\");\n\n    if (this.state.theme === \"darkBlock\") {\n      document.body.classList.value = \"darkBody\";\n    } else {\n      document.body.classList.value = \"lightBody\";\n    }\n\n    let buttonTheme = \"lightTheme\";\n    if (this.state.theme === \"darkBlock\") {\n      buttonTheme = \"current darkCurrent\";\n    } else {\n      buttonTheme = \"current lightCurrent\";\n    }\n\n    let appsToRender = [];\n    this.state.apps.forEach((app) => {\n      if (this.state.filter === \"All\") {\n        appsToRender.push(app);\n      } else {\n        app.platforms.forEach((platform) => {\n          if (platform[0] === this.state.filter) {\n            appsToRender.push(app);\n          }\n        });\n      }\n    });\n\n    return (\n      <Fragment>\n        <div className=\"wrapper\">\n          <button\n            onClick={this.switchTheme}\n            className={\"themeSwitcher \" + this.state.theme}\n            id=\"themeSwitcher\"\n          >\n            <div className=\"light\">\n              <i className=\"fas fa-sun fa-2x\"></i>\n            </div>\n            <div className=\"dark\">\n              <i className=\"fas fa-moon fa-2x\"></i>\n            </div>\n            <div className={buttonTheme} id=\"current\"></div>\n          </button>\n          <h1>Browse cool apps made right here in Canada</h1>\n          <select name=\"filter\" id=\"filter\" onChange={this.filter}>\n            <option value=\"All\">All</option>\n            <option value=\"iOS\">iOS</option>\n            <option value=\"Android\">Android</option>\n            <option value=\"MacOS\">MacOS</option>\n            <option value=\"Windows\">Windows</option>\n            <option value=\"Linux\">Linux</option>\n            <option value=\"Web\">Web</option>\n          </select>\n          <div className=\"cards\">\n            {appsToRender.map((app) => {\n              return (\n                <Card\n                  title={app.title}\n                  desc={app.desc}\n                  platforms={app.platforms}\n                  key={app.key}\n                  theme={this.state.theme}\n                />\n              );\n            })}\n          </div>\n          <form className=\"submissionForm\" onSubmit={this.handleSubmit}>\n            <h2>Submit an App</h2>\n\n            <label htmlFor=\"title\" className=\"raise\">\n              Title:\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              className={this.state.theme}\n              maxLength=\"20\"\n              required\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"desc\" className=\"raise\">\n              Description:\n            </label>\n            <textarea\n              id=\"desc\"\n              className={this.state.theme}\n              maxLength=\"100\"\n              required\n              onChange={this.handleChange}\n            ></textarea>\n\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"ios\"\n                onChange={() => {\n                  this.toggleElement(iosUrl);\n                }}\n              />\n              <label htmlFor=\"ios\" className=\"raise\">\n                iOS\n              </label>\n              <label htmlFor=\"iosUrl\" className=\"sr-only\">\n                Enter App Store URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"iosUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"android\"\n                onChange={() => {\n                  this.toggleElement(androidUrl);\n                }}\n              />\n              <label htmlFor=\"android\" className=\"raise\">\n                Android\n              </label>\n              <label htmlFor=\"androidUrl\" className=\"sr-only\">\n                Enter Google Play Store URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"androidUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"mac\"\n                onChange={() => {\n                  this.toggleElement(macUrl);\n                }}\n              />\n              <label htmlFor=\"mac\" className=\"raise\">\n                MacOS\n              </label>\n              <label htmlFor=\"macUrl\" className=\"sr-only\">\n                Enter Download URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"macUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"windows\"\n                onChange={() => {\n                  this.toggleElement(windowsUrl);\n                }}\n              />\n              <label htmlFor=\"windows\" className=\"raise\">\n                Windows\n              </label>\n              <label htmlFor=\"windowsUrl\" className=\"sr-only\">\n                Enter Download URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"windowsUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"linux\"\n                onChange={() => {\n                  this.toggleElement(linuxUrl);\n                }}\n              />\n              <label htmlFor=\"linux\" className=\"raise\">\n                Linux\n              </label>\n              <label htmlFor=\"linuxUrl\" className=\"sr-only\">\n                Enter App Store URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"linuxUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n            <fieldset className=\"urls\">\n              <input\n                type=\"checkbox\"\n                id=\"web\"\n                onChange={() => {\n                  this.toggleElement(webUrl);\n                }}\n              />\n              <label htmlFor=\"web\" className=\"raise\">\n                Web\n              </label>\n              <label htmlFor=\"webUrl\" className=\"sr-only\">\n                Enter URL\n              </label>\n              <input\n                type=\"text\"\n                id=\"webUrl\"\n                className={this.state.theme}\n                placeholder=\"Enter download URL\"\n                onChange={this.handleChange}\n              />\n            </fieldset>\n\n            <button type=\"submit\" className={this.state.theme + \" submit\"}>\n              Submit\n            </button>\n          </form>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styling/App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}